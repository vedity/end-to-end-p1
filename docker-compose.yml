version: '3'
x-airflow-common:
  &airflow-common
  build: './airflow'
  
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./MS/mlaas:/opt/airflow/dags
    - ./MS/mlaas/logs:/opt/airflow/logs
    - ./MS/mlaas/mlruns:/opt/airflow/mlruns
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    build: './DB'
    hostname: postgresql
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  # flower:
  #   <<: *airflow-common
  #   command: celery flower
  #   ports:
  #     - 5555:5555
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #   restart: always

  web:                                             # create a MLFlow container
    build: './MS' 
    container_name: ms_container
    #command: bash -c "mlflow server --backend-store-uri ./mlflow --host 0.0.0.0 --port 5400 && python manage.py runserver 0.0.0.0:8000" # construct the container along the Dockerfile in this folder
    command: python manage.py runserver 0.0.0.0:8000 
    volumes: 
        - "./MS/mlaas:/mlaas"
    ports:
        #- "5400:5400" 
        - "8000:8000"
    links:
        - postgres
    depends_on:
        - mlflow

  mlflow:
      build: './MS'
      #command: mlflow server --backend-store-uri ./mlflow --host 0.0.0.0 --port 5400
      command: mlflow server --backend-store-uri postgresql://airflow:airflow@postgresql:5432/airflow?options=-csearch_path%3Ddbo,mlflow --default-artifact-root file:///mlaas/mlruns --host 0.0.0.0 --port 5400
      volumes: 
          - "./MS/mlaas:/mlaas"
      ports:
          - "5400:5400"
      links:
          - postgres
      depends_on:
          - postgres

  angular:
      build: './Web'
      ports:
      - "4200:4200"
      volumes: 
      - "/app/node_modules"
      - "./Web:/app"
      depends_on:
      - web

volumes:
  postgres-db-volume: